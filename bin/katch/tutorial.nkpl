-- NKPL tutorial

-- NKPL (NetKAT programming language) is a domain-specific language for
-- programming and verifying network policies.
-- This tutorial is a brief introduction to the language and its features.

-- The basic statement in NKPL is the equivalence check:

check ⊥ ≡ ⊥

-- This statement checks that two NetKAT configurations are equivalent,
-- and otherwise raises an error. The expression ⊥ is a NetKAT expression
-- that represents a network configuration. In this case, it represents
-- the empty network configuration that drops all packets.

-- NKPL supports the following NetKAT expressions:
-- e ::= ⊥ | ⊤ | δ | v | @f=n | @f←n | e⋆ | e1 ∪ e2 | e1 ∩ e2 | e1 ⋅ e2 | e1 ⊕ e2 | e1 ∖ e2 | forward e | backward e | forall f e | exists f e
-- The meaning of these expressions is as follows:
--   ⊥  drops all packets
--   ⊤  forwards all packets
--   δ  adds the packet to the trace
--   v  variable reference
--   @f=n  matches packets with field f equal to n
--   @f←n  sets the field f to n
--   e⋆  sends the packets through the network zero or more times
--   e1 ∪ e2  union of traces produced by e1 and e2
--   e1 ∩ e2  intersection of traces produced by e1 and e2
--   e1 ⋅ e2  concatenation of traces produced by e1 and e2
--   e1 ⊕ e2  xor of traces produced by e1 and e2
--   e1 ∖ e2  difference of traces produced by e1 and e2
--  forward e  collapses the traces produced by e into the final packets in the trace
--  backward e  collapses the traces produced by e into the initial packets in the trace
--  forall f e  removes field f by taking the intersection
--  exists f e  removes field f by taking the union
-- For more details, see the paper.

-- NKPL supports the following statements:
-- s ::= check e1 ≡ e2 | check e1 ≢ e2 | v = e | import "<file>" | for i ∈ 0..n do s | print e | graphviz "path" e
-- The meaning of these statements is as follows:
--   check e1 ≡ e2  checks that e1 and e2 are equivalent
--   check e1 ≢ e2  checks that e1 and e2 are not equivalent
--   v = e  assigns the value of e to variable v
--   import "<file>"  imports the contents of the file
--   for i ∈ 0..n do s  repeats the statement s n times
--   print e  prints the value of e
--   graphviz "path" e  outputs graphviz files for the automaton of expression e and its SP/SPP transitions

-- Example queries: checking for equivalence or inequivalence

-- Basic equivalence check
check ⊥ ≡ ⊥
check ⊥ ≢ ⊤
check (δ⋅δ)⋆ ≢ (δ⋆⋅δ)⋆
check (δ⋅δ⋆)⋆ ≡ (δ⋆⋅δ)⋆

-- Now with fields
check @a=5 ≡ @a=5 ⋅ @a←5
check @a=5 ≢ @a←5 ⋅ @a=5

-- Now with more complex expressions
check δ⋅@d=3 ≡ @d=3⋅δ
check ∅∪((@b←5⋅ε∪@c←3⋅@a=3)⋅(∅⋆⋅ε))⋆ ≡ ((@b←5⋅ε∪@a=3⋅@c←3)⋅∅⋆)⋆
check (@b←1⋅@b=1)⋆⋆⋅(@e←3⋅@d←5) ≡ @b←1⋆⋆⋅(@d←5⋅@e←3)

-- For more examples, see the other files in the nkpl subdirectories, or the paper.

inoutmap (((@dst = 1) ⋅ (@port = 8) ⋅ (@port ← 0)) + ((@dst = 1) ⋅ (@port = 10) ⋅ (@port ← 0)) + ((@dst = 0) ⋅ (@port = 0) ⋅ (@port ← 8)) + ((@dst = 0) ⋅ (@port = 10) ⋅ (@port ← 8)) + ((@dst = 2) ⋅ (@port = 8) ⋅ (@port ← 10)) + ((@dst = 2) ⋅ (@port = 0) ⋅ (@port ← 10))+((@dst = 1) ⋅ (@port = 1) ⋅ (@port ← 9)) + ((@dst = 0) ⋅ (@port = 9) ⋅ (@port ← 1)) + ((@dst = 2) ⋅ (@port = 9) ⋅ (@port ← 1))+⊥) ⋅ ((@dst = 1) ⋅ (@port = 0) ⋅ (@port ← 1)) + ((@dst = 1) ⋅ (@port = 2) ⋅ (@port ← 3)) + ((@dst = 1) ⋅ (@port = 7) ⋅ (@port ← 6)) + ((@dst = 0) ⋅ (@port = 1) ⋅ (@port ← 0)) + ((@dst = 0) ⋅ (@port = 3) ⋅ (@port ← 2)) + ((@dst = 0) ⋅ (@port = 6) ⋅ (@port ← 7)) + ((@dst = 2) ⋅ (@port = 1) ⋅ (@port ← 0)) + ((@dst = 2) ⋅ (@port = 3) ⋅ (@port ← 2)) + ((@dst = 2) ⋅ (@port = 6) ⋅ (@port ← 7)) ⋅ ((((@dst = 1) ⋅ (@port = 8) ⋅ (@port ← 0)) + ((@dst = 1) ⋅ (@port = 10) ⋅ (@port ← 0)) + ((@dst = 0) ⋅ (@port = 0) ⋅ (@port ← 8)) + ((@dst = 0) ⋅ (@port = 10) ⋅ (@port ← 8)) + ((@dst = 2) ⋅ (@port = 8) ⋅ (@port ← 10)) + ((@dst = 2) ⋅ (@port = 0) ⋅ (@port ← 10))+((@dst = 1) ⋅ (@port = 1) ⋅ (@port ← 9)) + ((@dst = 0) ⋅ (@port = 9) ⋅ (@port ← 1)) + ((@dst = 2) ⋅ (@port = 9) ⋅ (@port ← 1))+⊥) ⋅ ((@dst = 1) ⋅ (@port = 0) ⋅ (@port ← 1)) + ((@dst = 1) ⋅ (@port = 2) ⋅ (@port ← 3)) + ((@dst = 1) ⋅ (@port = 7) ⋅ (@port ← 6)) + ((@dst = 0) ⋅ (@port = 1) ⋅ (@port ← 0)) + ((@dst = 0) ⋅ (@port = 3) ⋅ (@port ← 2)) + ((@dst = 0) ⋅ (@port = 6) ⋅ (@port ← 7)) + ((@dst = 2) ⋅ (@port = 1) ⋅ (@port ← 0)) + ((@dst = 2) ⋅ (@port = 3) ⋅ (@port ← 2)) + ((@dst = 2) ⋅ (@port = 6) ⋅ (@port ← 7)))⋆
