load restricted_dnk.maude

fmod DNK is
  protecting RESTRICTED_DNK .

  sorts CompComm RecursiveComp UnguardedTerm DNKComp .
	subsort RecursiveComp < UnguardedTerm < DNKComp .

  --- network component: DNA term + id of component(s)
  op c(_,_) : RDNK Nat -> DNKComp .
  op c(_,_) : Comm Nat -> DNKComp .
  op c(_,_) : String Nat -> DNKComp .

	op _o+_ : DNKComp DNKComp -> DNKComp [ctor comm assoc metadata "nondeterministic choice" prec 43] .
	op _;_ : DNKComp DNKComp -> DNKComp [ctor metadata "sequential composition" prec 40 gather (E e)] .
	op _;_ : CompComm DNKComp -> DNKComp [ctor metadata "sequential composition" prec 40 gather (E e)] .
	op _||_ : DNKComp DNKComp -> DNKComp [ctor comm metadata "parallel composition" prec 42 gather (E e)] .
	op _|_ : DNKComp DNKComp -> DNKComp [ctor comm prec 42 gather (E e)] .
	op _||<_ : DNKComp DNKComp -> DNKComp [ctor metadata "left merge" prec 42 gather (e E)] .

	op rcfg(_,_,_,_) : Channel String Nat Nat -> CompComm . ---- component communication


  var U V : RDNK .
  var Z : Comm .
  var X : Channel .
  vars P Q R : DNKComp .
  var N : String .
  vars I J : Nat . 


  --- spread the component id across all atoms of a RDNK term
	eq c(U o+ V, I) = c(U, I) o+ c(V, I) .
	eq c(N ; U, I) = c(N, I) ; c(U, I) .
	eq c(Z ; U, I) = c(Z, I) ; c(U, I) .


	---A1: added comm to _o+_
	---A2: added assoc to _o+_
	eq [A3] : (P o+ P) = P .
	eq [A4] : (P o+ c(bot, I)) = P .

	---A5: added comm to _||_
	---A6: added assoc to _||_

  eq [A7] : (P || c(bot, I)) = P .

  ceq [A8] : (P || Q) = (P ||< Q) o+ (Q ||< P) o+ (P | Q)
                                    if not (P :: RecursiveComp) /\ not (P :: UnguardedTerm) /\ not (Q :: RecursiveComp) /\ not (Q :: UnguardedTerm) .

  eq [A9] : c(bot, I) ||< P = c(bot, I) .

  eq [A10-netkat] : (c(N, I) ; P) ||< Q = c(N, I) ; (P || Q) .
  eq [A10-send] : (c((X ! N), I) ; P) ||< Q = c((X ! N), I) ; (P || Q) .
  eq [A10-receive] : (c((X ? N), I) ; P) ||< Q = c((X ? N), I) ; (P || Q) .
	eq [A10-rcfg] : (rcfg(X, N, I, J) ; Q) ||< R = rcfg(X, N, I, J) ; (Q || R) .

  eq [A11] : (P o+ Q) ||< R = (P ||< R) o+ (Q ||< R) .

  eq [A12] : (c((X ! N), I) ; Q) | (c((X ? N), J) ; R) = rcfg(X, N, I, J) ; (Q || R) .

  eq [A13] : (P o+ Q) | R = (P | R) o+ (Q | R) .

	---A14: added comm to _|_

	ceq [A15] : P | Q = c(bot, 0) if not (P :: RecursiveComp) /\ not (P :: UnguardedTerm) /\ not (Q :: RecursiveComp) /\ not (Q :: UnguardedTerm) [owise] .

  eq [cr-1] : P ||< c(bot, I) = P .
endfm


fmod RECURSIVE-DNK is
	including DNK .

  var I : Nat .
	vars P Q : DNKComp .
  var U : RDNK .

	op getRecPol(_) : Recursive -> RDNK .
	op unfold(_) : DNKComp -> DNKComp .
	op notUnfolded(_) : DNKComp -> Bool .


	---unfolding the recursive variables at once is very inefficient.
	---we perform the unfolding on the fly when it is necessary
	---i.e. when the execution cannot continue because the terms are not guarded.
	
	ceq unfold(P || Q) = (unfold(P) || Q) if (P :: UnguardedTerm) .
	ceq unfold(P ||< Q) = (unfold(P) ||< Q) if (P :: UnguardedTerm) .
	ceq unfold(P | Q) = (unfold(P) | Q) if (P :: UnguardedTerm) .
	ceq unfold(c(U, I)) = c(getRecPol(U), I) if (U :: Recursive) .

	eq notUnfolded(unfold(P)) = false .
	eq notUnfolded(P) = true [owise] .

	cmb [rec-1] : (P || Q) : UnguardedTerm if ((P :: RecursiveComp) or (P :: UnguardedTerm)) .
	cmb [rec-2] : (P ||< Q) : UnguardedTerm if ((P :: RecursiveComp) or (P :: UnguardedTerm)) .
  cmb [rec-3] : c(U, I) : RecursiveComp if (U :: Recursive) .
endfm


fmod COMM_STRING_CONVERSION is
  protecting DNK .
  protecting META-LEVEL .
  protecting META-TERM .
  protecting QID .
  protecting CONVERSION .

  op compCommToStr(_) : CompComm -> String .

  var X : Channel .
  var S : String .
  var C : CompComm .
  vars I J : Nat .

  ---- Use meta programming to get the channel name: move the channel variable 1 reflexion level up,
  ---- then get its name as QID and convert it to string
  eq compCommToStr(rcfg(X, S, I, J)) = "rcfg(" + string(getName(upTerm(X))) + ", '" + S + "', " + string(I, 10) + ", " + string(J, 10) + ")" .
  eq compCommToStr(C) = "" [owise] .
endfm
