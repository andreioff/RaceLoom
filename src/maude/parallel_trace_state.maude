view Worker from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv

mod CNL-MANAGER is
extending META-INTERPRETER .

protecting CONVERSION .
protecting LIST{Worker} .

sort PState .

op manager : -> Oid .
op User : -> Cid .

op inputList:_ : TermList -> Attribute .
op resultList:(_,_) : TermList Nat -> Attribute .
op #workers:_ : Nat -> Attribute .
op workers:_ : List{Worker} -> Attribute .

op state:_ : PState -> Attribute .
ops PInit PWorking PReady : -> PState .

op p-run : Configuration TermList -> Configuration .
op p-init : Nat -> Configuration .
op init : Oid Nat -> Msg [ctor msg] .

vars X Y WID : Oid .
var AS : AttributeSet .
vars K N R R2 : Nat .
vars T T2 T3 : Term .
vars IL TL : TermList .
var ResType : Type .
var W : List{Worker} .
var C : Configuration .

eq p-init(0) = < manager : User | none > .
eq p-init(N) = < manager : User | none > init(manager, N) .

eq p-run(< manager : User | #workers: 0, AS >, IL) = < manager : User | state: PReady, resultList: (empty, 0) > .
eq p-run(< manager : User | workers: nil, AS >, IL) = < manager : User | state: PReady, resultList: (empty, 0) > .
eq p-run(C, empty) = C .
eq p-run(< manager : User | state: PReady, #workers: K, workers: W, inputList: empty, resultList: (TL, N), AS >, IL)
  = < manager : User | state: PReady, #workers: K, workers: W, inputList: IL, resultList: (empty, 0), AS > .

op produceInterpreter : Oid Nat -> Configuration .
eq produceInterpreter(X, 0) = none .
eq produceInterpreter(X, s(N)) = createInterpreter(interpreterManager, X, newProcess)
    produceInterpreter(X, N) .

rl < X : User |
    AS >
    init(X, N)
=> < X : User |
    state: PInit,
    #workers: N,
    workers: nil,
    AS >
    produceInterpreter(X, N) .

rl < X : User | 
    state: PInit,
    AS >
createdInterpreter(X, Y, WID)
=> < X : User | 
  state: PInit,
    AS >
    insertModule(WID, X, upModule('COMPUTE-NEXT-LAYER, true)) .

rl < X : User | 
  state: PInit,
  workers: W,
  AS >
insertedModule(X, WID)
=> < X : User | 
  state: PInit,
  workers: (WID W),
  AS > .

crl < X : User | 
    state: PInit,
    #workers: N,
    workers: W,
    AS >
=> < X : User | 
  state: PReady,
  #workers: N,
  workers: W,
  inputList: empty,
  resultList: (empty, 0),
  AS >
if N == size(W) .

rl < X : User | 
    state: PReady,
    #workers: N,
    workers: W,
    inputList: (T, TL),
    AS >
=> < X : User | 
  state: PWorking,
  #workers: N,
  workers: W,
  inputList: (T, TL),
  AS > .

rl < X : User | 
  state: PWorking,
  inputList: (T, TL),
  workers: (WID W),
  AS >
=> < X : User | 
  state: PWorking,
  inputList: TL,
  workers: W,
  AS >
  reduceTerm(WID, X, 'COMPUTE-NEXT-LAYER, T) .

rl < X : User |
  state: PWorking,
  workers: W,
  resultList: (TL, R),
  AS >
  reducedTerm(X, WID, R2, T, ResType)
=> < X : User | 
    state: PWorking,
    workers: (W WID),
    resultList: ((TL, T), (R2 + R)),
    AS  
   > .

crl < X : User |
    state: PWorking,
    #workers: N,
    workers: W,
    inputList: empty,
    AS >
=> < X : User |
    state: PReady,
    #workers: N,
    workers: W,
    inputList: empty,
    AS > 
if N == size(W) .

endm

mod PARALLEL-COMPUTE-NEXT-LAYER is
  protecting NODE-LIST-SORT .
  protecting CNL-MANAGER .

  sort TopNRes .

  vars I K : Nat .
  var T : Term .
  var TL : TermList .
  var AS : AttributeSet .
  var W : Oid .
  var TN : Node .
  vars Nodes RemNodes : NodeList .
  var WorkersConfig : Configuration .

  op extractRes(_) : Configuration -> NodeList .
  op extractError : -> [NodeList] .
  eq extractRes(<> < W : User | state: PReady, inputList: empty, resultList: (empty, I), AS >) = nil .
  eq extractRes(<> < W : User | state: PReady, inputList: empty, resultList: ((T, TL), I), AS >) = downTerm(T, extractError) 
     extractRes(<> < W : User | state: PReady, inputList: empty, resultList: (TL, I), AS >) . ---- TODO Could use some error handling

  op topNRes(_,_) : NodeList NodeList -> TopNRes .
  op takeN(_,_) : Nat NodeList -> TopNRes .
  op $takeN(_,_,_) : Nat NodeList NodeList -> TopNRes .

  eq takeN(K, Nodes) = $takeN(K, Nodes, nil) .
  eq $takeN(0, RemNodes, Nodes) = topNRes(Nodes, RemNodes) .
  eq $takeN(K, nil, Nodes) = topNRes(Nodes, nil) .
  eq $takeN(s(K), (TN RemNodes), Nodes) = $takeN(K, RemNodes, (TN Nodes)) .

  ---- Splits a given list of nodes into chunks of given size.
  ---- Each chunk is converted into a corresponding meta term
  ---- to be passed to parallel workers.
  ---- Last chunck may contain fewer elements if the size of
  ---- the initial list is not a multiple of the first arg.
  op splitNodesList(_,_) : Nat NodeList -> TermList .
  op $splitNodesList(_,_) : Nat TopNRes -> TermList .
  eq splitNodesList(0, Nodes) = empty .
  eq splitNodesList(K, nil) = empty [print "Nodes per thread: " K] .
  eq splitNodesList(K, Nodes) = $splitNodesList(K, takeN(K, Nodes)) .
  eq $splitNodesList(K, topNRes(Nodes, RemNodes)) = ('computeNextLayer[upTerm(Nodes)], splitNodesList(K, RemNodes)) .

  ---- first arg: nr of sublists, second arg: total size 
  op calcSubListSize(_,_) : Nat Nat -> Nat .
  eq calcSubListSize(0, K) = K .
  eq calcSubListSize(I, K) = if (K quo I) == 0 then 1 else (K quo I) fi [print "Processing " K " nodes"] .

  op cnlParallel : Configuration NodeList -> NodeList .
  op $cnlParallel : Configuration TermList -> NodeList .
  eq cnlParallel(< manager : User | #workers: K, AS >, Nodes) =
    $cnlParallel(< manager : User | #workers: K, AS >, splitNodesList(calcSubListSize(K, size(Nodes)), Nodes)) .
  eq $cnlParallel(WorkersConfig, TL) = extractRes(<> p-run(WorkersConfig, TL)) .
endm
