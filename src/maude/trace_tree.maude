load vector_clock.maude

fmod TRACE_TREE is
  protecting VECTOR_CLOCK_MAP .
  protecting CONVERSION .

  sorts TraceNode TraceNodes .

  op TLeaf : -> TraceNode .
  ---- A trace node contains a transition, a vector clock map,
  ---- and the next neighbors the node is connected to in the trace
  op TNode(_,_,_) : String VCMap TraceNodes -> TraceNode .
  ---- empty list of nodes
  op TEmpty : -> TraceNodes .
  op appendTNode(_,_) : TraceNode TraceNodes -> TraceNodes .
  op TConcat(_,_) : TraceNodes TraceNodes -> TraceNodes .

  op TraceToDOT(_) : TraceNodes -> String .
  op TraceToDOTAux(_,_,_) : Nat String TraceNodes -> String .
  op declareNode(_,_,_) : Nat String VCMap -> String .
  op declareEdge(_,_,_) : String String String -> String .
  op getNodeId(_,_) : Nat String -> String .

  var N : Nat .
  var S PID From To : String .
  var VCs : VCMap .
  var TN : TraceNode .
  var Nodes RemNodes : TraceNodes .

  eq TConcat(TEmpty, Nodes) = Nodes .
  eq TConcat(appendTNode(TN, RemNodes), Nodes) = TConcat(RemNodes, appendTNode(TN, Nodes)) .

  ceq getNodeId(N, PID) = PID + string(N, 10) if PID =/= "" .
  eq getNodeId(N, PID) = "n" + string(N, 10) [owise] . 

  eq declareNode(N, PID, VCs) = getNodeId(N, PID) + " [label=\"" + VCMapToString(VCs) + "\"];\n" .

  ceq declareEdge(From, To, S) = From + " -> " + To + "[label=\"" + S + "\"];\n" if (From =/= "") /\ (To =/= "") .
  eq declareEdge(From, To, S) = "" [owise] .

  eq TraceToDOT(Nodes) = "digraph G {\n" + TraceToDOTAux(0, "", Nodes) + "}" .
  
  eq TraceToDOTAux(N, PID, TEmpty) = "" .
  eq TraceToDOTAux(N, PID, appendTNode(TLeaf, RemNodes)) = TraceToDOTAux(N, PID, RemNodes) .
  eq TraceToDOTAux(N, PID, appendTNode(TNode(S, VCs, Nodes), RemNodes)) = declareNode(N, PID, VCs) +
                                                                          declareEdge(PID, getNodeId(N, PID), S) +
                                                                          TraceToDOTAux(N, getNodeId(N, PID), Nodes) +
                                                                          TraceToDOTAux(s(N), PID, RemNodes) .
endfm
