fmod TRACE-TREE is
  protecting VECTOR-CLOCK-MAP .

  sorts TraceNode TraceNodes TNType .

  ---- A trace node contains a transition, a vector clock map,
  ---- and the next neighbors the node is connected to in the trace
  op TNode(_,_,_,_) : TNType String VCMap TraceNodes -> TraceNode .
  ---- empty list of nodes
  op TEmpty : -> TraceNodes .
  op TAppend(_,_) : TraceNode TraceNodes -> TraceNodes .
  op TConcat(_,_) : TraceNodes TraceNodes -> TraceNodes .

  op TDR : -> TNType . ---- data race
  op TSTART : -> TNType . ---- start node 
  op TNORMAL : -> TNType . ---- normal node 
  op TPRUNED : -> TNType . ---- normal node 

  var TN : TraceNode .
  vars Nodes RemNodes : TraceNodes .

  eq TConcat(TEmpty, Nodes) = Nodes .
  eq TConcat(TAppend(TN, RemNodes), Nodes) = TConcat(RemNodes, TAppend(TN, Nodes)) .
endfm

view TraceNodes from TRIV to TRACE-TREE is
  sort Elt to TraceNodes .
endv

fmod TRACE-TREE-TO-DOT is
  protecting TRACE-TREE .
  protecting CONVERSION .
  protecting EXT-BOOL .

  op TraceToDOT(_) : TraceNodes -> String .
  op TraceToDOTAux(_,_,_) : Nat String TraceNodes -> String .
  op declareNode(_,_,_,_) : TNType Nat String VCMap -> String .
  op declareEdge(_,_,_) : String String String -> String .
  op getNodeId(_,_) : Nat String -> String .
  op getNodeColor(_) : TNType -> String .

  var T : TNType .
  var N : Nat .
  vars S PID From To : String .
  var VCs : VCMap .
  vars Nodes RemNodes : TraceNodes .

  ---- purple #9068be 
  eq getNodeColor(TSTART) = "#6ed37e" .
  eq getNodeColor(TPRUNED) = "#9068be" .
  eq getNodeColor(TDR) = "#e62739" .
  eq getNodeColor(T) = "#e1e8f0" [owise] .

  eq getNodeId(N, PID) = if PID == ""
                         then "n" + string(N, 10)
                         else PID + string(N, 10)
                         fi .

  eq declareNode(T, N, PID, VCs) = getNodeId(N, PID) + " [label=\"" + VCMapToString(VCs) + 
                                   "\", shape=rectangle, style=filled, fillcolor=\"" +
                                   getNodeColor(T) + "\"];\n" .

  eq declareEdge(From, To, S) = if ((From =/= "") and-then (To =/= ""))
                                then From + " -> " + To + "[label=\"" + S + "\"];\n"
                                else ""
                                fi .

  eq TraceToDOT(Nodes) = "digraph G {\n" + TraceToDOTAux(0, "", Nodes) + "}" .
  
  eq TraceToDOTAux(N, PID, TEmpty) = "" .
  eq TraceToDOTAux(N, PID, TAppend(TNode(T, S, VCs, Nodes), RemNodes)) = declareNode(T, N, PID, VCs) +
                                                                          declareEdge(PID, getNodeId(N, PID), S) +
                                                                          TraceToDOTAux(N, getNodeId(N, PID), Nodes) +
                                                                          TraceToDOTAux(s(N), PID, RemNodes) .
endfm

fmod TRACE-COLLECTOR is
  protecting TRACE-TREE .
  --- Operator with special hook. Works only with the Python package Maude.
  --- More details here: https://github.com/fadoss/maude-bindings
  op CollectTrace : String -> String [special (
      id-hook SpecialHubSymbol
  )] .

  vars ChildNodes TNs : TraceNodes .
  var TR : String .
  var T : TNType .
  var N : String .
  var VCs : VCMap .

  ---- the shape of the appended terms should match Python objects of type Tuple[str, List[List[int]]]
  op traceAppend(_,_,_) : String String VCMap -> String .
  eq traceAppend("", N, VCs) = "(\"" + N + "\",[" + VCMapToString(VCs) + "])" .
  eq traceAppend(TR, N, VCs) = TR + ",(\"" + N + "\",[" + VCMapToString(VCs) + "])" .

  op collectTraces(_) : TraceNodes -> String .
  op $collectTraces(_,_) : TraceNodes String -> String .
  eq collectTraces(TNs) = $collectTraces(TNs, "") .
  eq $collectTraces(TEmpty, TR) = CollectTrace("[" + TR + "]") .
  ---- separate case to prevent collecting incomplete traces 
  eq $collectTraces(TAppend(TNode(T, N, VCs, ChildNodes), TEmpty), TR) = $collectTraces(ChildNodes, traceAppend(TR, N, VCs)) .
  eq $collectTraces(TAppend(TNode(T, N, VCs, ChildNodes), TNs), TR) = $collectTraces(ChildNodes, traceAppend(TR, N, VCs)) + $collectTraces(TNs, TR) .
endfm
