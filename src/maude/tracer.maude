load sym_dnk.maude

fmod TRACER_UTIL is 
  protecting STRING .
	protecting MAP_UTIL {Nat, String} * (sort Map {Nat, String} to SwMap) .

  op concatSws_ : SwMap -> String .
  op network__ : SwMap String -> String [gather (E e)].
  op bigSwitch__ : SwMap String -> String [gather (E e)].

  var Sws : SwMap .
  var I : Nat .
  vars L, X : String .

  eq concatSws empty = "" .
  eq concatSws (I |-> X , empty) = X .
  eq concatSws (I |-> X , Sws) = X + "+" + concatSws Sws .

  eq network Sws L = "(" + (concatSws Sws) + ") . " + L .
  eq bigSwitch Sws L = (network Sws L) + " . (" + (network Sws L) + ")*" .
endfm

fmod TRACER is
	protecting RECURSIVE_SYM_DNA .
  protecting TRACER_UTIL .

  --- Operator with special hook. Works only with the Python package Maude.
  --- More details here: https://github.com/fadoss/maude-bindings
  op NetKATToNF : String -> String [special (
      id-hook SpecialHubSymbol
  )] .
  
  op parallelJoin___ : DNA DNAMap Nat -> DNA_VC .
	op tracer{_}(_,_) : Nat DNA DNAMap -> DNAVCList [gather (e e E)] .

  vars Cs : DNAMap . 
  vars BSw C : DNA .
  var N VCSize : Nat .

  eq parallelJoin BSw empty VCSize = vc(BSw, (newVC VCSize), 0) .
  eq parallelJoin BSw (N |-> C , Cs) VCSize = ((parallelJoin BSw Cs VCSize) || vc(C, (newVC VCSize), s(N))) .

  eq tracer{N}(BSw, Cs) = rd{N}((parallelJoin BSw Cs s(mapLength(Cs))), nil) .

endfm

fmod TESTING is
  protecting TRACER .
  protecting VECTOR_CLOCK .

  op SDN_ : SwMap -> Recursive .
  op C0 : -> Recursive .
  op Link : -> String .
	op Up0 : -> Channel .

  var Sws : SwMap .
  var VC : VClock .
  var I : Nat .

  eq Link = "(p=3).(p<-0) + (p=1).(p<-15)" .

  --- TODO: INSERT HERE THE CALL TO NetKATToNF to process the big switch notation
  eq getRecPol(SDN Sws) = (bigSwitch Sws "") ; SDN Sws o+
                          (Up0 ? "test0") ; SDN insert(0, "test0", Sws) .
  
  eq getRecPol(C0) = (Up0 ! "test0") ; C0 .
endfm
