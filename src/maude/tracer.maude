load dnk.maude
load vector_clock.maude

load dnk_model_util.maude
load trace_state.maude
load metaInterpreter.maude
load parallel_trace_state.maude
load traces_collector.maude

mod TRACER_UTIL is 
  protecting STRING .
	protecting RECURSIVE-DNK .
  protecting MAP_UTIL {Nat, RDNK} * (sort Map {Nat, RDNK} to RDNKMap) .

  --- Operator with special hook. Works only with the Python package Maude.
  --- More details here: https://github.com/fadoss/maude-bindings
  op NetKATToNF : String -> String [special (
      id-hook SpecialHubSymbol
  )] .

  op parallelJoin(_,_,_) : RDNK RDNKMap Nat -> DNKComp .

  var Cs : RDNKMap . 
  vars BSw C : RDNK .
  vars I VCSize : Nat .

  eq parallelJoin(BSw, empty, VCSize) = c(BSw, 0) .
  eq parallelJoin(BSw, (I |-> C , Cs), VCSize) = (parallelJoin(BSw, Cs, VCSize) || c(C, s(I))) .
endm

mod TRACER is
  protecting TRACES_COLLECTOR .
  protecting PARALLEL-COMPUTE-NEXT-LAYER .
  protecting COMM_STRING_CONVERSION .
  protecting TRACER_UTIL .
  protecting CONVERSION .

	op rd{_}{_}(_,_) : Configuration Nat NodeList Nat -> NodeListMap .
	op $rd{_}{_}(_) : Configuration Nat AssignIdsResult -> NodeListMap .

	op tracer{_}{_}(_,_) : Configuration Nat RDNK RDNKMap -> NodeListMap .

  var Cs : RDNKMap . 
  vars P Q : DNKComp .
  vars N TR : String .
  var X : Channel .
  vars NewVCs VCs : VCMap .
  var BSw : RDNK .
  vars I J D K ID PID NID : Nat .
  vars Nodes RemNodes : NodeList .
  var TN : Node .
  var WorkersConfig : Configuration .
  var M : Oid .
  var AS : AttributeSet .

  eq rd{WorkersConfig}{0}(Nodes, NID) = (0 |-> Nodes, empty) .
  eq rd{WorkersConfig}{D}(nil, NID) = empty .
  eq rd{WorkersConfig}{s(D)}(Nodes, NID) = insert(s(D), Nodes, 
    $rd{WorkersConfig}{D}(
      assignIds(
        cnlParallel(WorkersConfig, filter(Nodes)),
        NID
      )
    )) .
  eq $rd{WorkersConfig}{D}(assignIdsResult(Nodes, NID)) = rd{WorkersConfig}{D}(Nodes, NID) .

  --- Assumes that the Cs map mimics an array, i.e. its keys start from 0 and increase by 1 with every position.
  --- E.g. 0 |-> first_RDNK, 1 |-> second_RDNK, 2 |-> third_RDNK, etc.
  eq tracer{WorkersConfig}{0}(BSw, Cs) = empty .
  eq tracer{<> < M : User | state: PReady, AS >}{D}(BSw, Cs) = rd{< M : User | state: PReady, AS >}{D}(
        snode(0, parallelJoin(BSw, Cs, s(mapLength(Cs))), newVCMap(s(mapLength(Cs)))),
        1
      ) .
endm
