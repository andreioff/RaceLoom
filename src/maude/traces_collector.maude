mod TRACES_COLLECTOR is
  protecting STRING .
  protecting TRACE_STATE .

  --- Operator with special hook. Works only with the Python package Maude.
  --- More details here: https://github.com/fadoss/maude-bindings
  op CollectTrace : String -> String [special (
      id-hook SpecialHubSymbol
  )] .

  op startTrace(_) : VCMap -> String .
  op traceAppend(_,_,_) : String String VCMap -> String .
  op collectTraces{_}(_) : Nat NodeListMap -> String .
  op $collectTraces{_}(_,_,_) : Nat NodeListMap Nat String -> String .

  vars N TR : String .
  var VCs : VCMap .
  var P : DNKComp .
  vars D ID PID PID2 : Nat .
  var RemMap : NodeListMap .
  vars Nodes RemNodes : NodeList .

  eq collectTraces{0}(RemMap) = "" .
  eq collectTraces{s(D)}((s(D) |-> (snode(ID, P, VCs) RemNodes), RemMap)) = $collectTraces{D}(RemMap, ID, startTrace(VCs)) .
  eq collectTraces{D}((D |-> (node(ID, PID, P, N, VCs) RemNodes), RemMap)) =
    collectTraces{D}((D |-> RemNodes, RemMap)) . ---- only start nodes should exist in the first pair of the map
  eq collectTraces{D}(RemMap) = "" [owise] .


  eq $collectTraces{0}(RemMap, PID, TR) = "" .
  eq $collectTraces{D}(empty, PID, TR) = "" .
  eq $collectTraces{D}((D |-> nil, RemMap), PID, TR) = "" .
  eq $collectTraces{D}((D |-> (snode(ID, P, VCs) RemNodes), RemMap), PID, TR) = 
    $collectTraces{D}((D |-> RemNodes, RemMap), PID, TR) . ---- start nodes are allowed only in the first pair of the map

  eq $collectTraces{s(D)}((s(D) |-> (node(ID, PID2, P, N, VCs) RemNodes), RemMap), PID, TR) = 
    if PID2 == PID and hasIncmpVCs(VCs) then
      CollectTrace("[" + traceAppend(TR, N, VCs) + "]")
    else (if PID2 == PID then
      $collectTraces{D}(RemMap, ID, traceAppend(TR, N, VCs))
    else
      ""
    fi) fi + $collectTraces{s(D)}((s(D) |-> RemNodes, RemMap), PID, TR) .
  eq $collectTraces{D}(RemMap, PID, TR) = "" [owise] .

  eq startTrace(VCs) = "(\"\",[" + VCMapToString(VCs) + "])" .
  ---- the shape of the appended terms should match Python objects of type Tuple[str, List[List[int]]]
  eq traceAppend(TR, N, VCs) = TR + ",(\"" + N + "\",[" + VCMapToString(VCs) + "])" .
endm
